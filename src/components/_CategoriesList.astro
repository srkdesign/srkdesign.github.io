---
// Imports
import { getCollection, type CollectionEntry } from "astro:content";
import { CATEGORIES } from "../categories";

// Props
type Post = CollectionEntry<"blog">;
type CategorySlug = keyof typeof CATEGORIES;

// Constants
const currentPath = Astro.url.pathname;

const allPosts: Post[] = await getCollection("blog", ({ data }: Post) => {
  return data.isDraft !== true;
});

const postsByCategory = Object.entries(CATEGORIES).reduce(
  (acc, [slug, label]) => {
    const categorySlug = slug as CategorySlug;
    const postsInCategory = allPosts.filter(
      (post: Post) => post.data.category === categorySlug
    );
    acc[categorySlug] = postsInCategory;
    return acc;
  },
  {} as Record<CategorySlug, Post[]>
);
---

<aside>
  <nav class="flex flex-col gap-4">
    {
      Object.entries(postsByCategory).map(([slug, posts]) => {
        const categoryLabel = CATEGORIES[slug as CategorySlug];
        const isCurrentCategory = posts.some(
          (post) => `/blog/${post.id}/` === currentPath
        );
        return (
          <details open={isCurrentCategory} class="cursor-pointer">
            <summary class="md:text-xl text-3xl font-medium md:mb-4 mb-8">
              {categoryLabel}
            </summary>
            {posts.length === 0 ? (
              <p>В этой категории нет статей</p>
            ) : (
              <ul class="flex flex-col md:gap-2 gap-4">
                {posts.map((post) => (
                  <li>
                    <a
                      href={`/blog/${post.id}/`}
                      class={`flex md:text-base text-xl ${`/blog/${post.id}/` === currentPath ? "text-white" : "text-neutral-400"}`}
                    >
                      {post.data.title}
                    </a>
                  </li>
                ))}
              </ul>
            )}
          </details>
        );
      })
    }
  </nav>
</aside>
